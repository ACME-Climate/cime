#!/usr/bin/env perl
#-----------------------------------------------------------------------------------------------
#
# create_clone
#
# This utility allows the CCSM user to specify configuration
# options via a commandline interface.
#
#-----------------------------------------------------------------------------------------------

use strict;
#use warnings;
#use diagnostics;

use Cwd qw( getcwd abs_path chdir);
use English;
use Getopt::Long;
use IO::File;
use IO::Handle;

#-----------------------------------------------------------------------------------------------
# Setting autoflush (an IO::Handle method) on STDOUT helps in debugging.  It forces the test
# descriptions to be printed to STDOUT before the error messages start.

*STDOUT->autoflush();                  

#-----------------------------------------------------------------------------------------------
# Set the directory that contains the CCSM configuration scripts.  If the create_newcase command was
# issued using a relative or absolute path, that path is in $ProgDir.  Otherwise assume the
# command was issued from the current working directory.

(my $ProgName = $0) =~ s!(.*)/!!;      # name of this script
my $ProgDir = $1;                      # name of directory containing this script -- may be a
                                       # relative or absolute path, or null if the script is in
                                       # the user's PATH
my $cwd = getcwd();                    # current working directory
my $cfgdir;                            # absolute pathname of directory that contains this script
if ($ProgDir) { 
    $cfgdir = abs_path($ProgDir);
} else {
    $cfgdir = $cwd;
}

my $cimeroot = abs_path("$cfgdir/../");
(-d "$cimeroot")  or  die <<"EOF";
** Cannot find cimeroot directory \"$cimeroot\" **
EOF

#-----------------------------------------------------------------------------------------------
# Save commandline
my $commandline = "$cfgdir/create_clone @ARGV";

#-----------------------------------------------------------------------------------------------

if ($#ARGV == -1) {
    print "Invoke create_clone -help [or -h] for usage\n";
    exit;
}

#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;
SYNOPSIS
     create_clone [options]
OPTIONS
     User supplied values are denoted in angle brackets (<>).  Any value that contains
     white-space must be quoted.  Long option names may be supplied with either single
     or double leading dashes.  A consequence of this is that single letter options may
     NOT be bundled.

     -help [or -h]        Print usage to STDOUT.
     -case <caseroot>     Specify the new case directory.
     -clone <cloneroot>   Specify the case to be cloned.
     -mach_dir            Optional location of machines directory
     -project <name>      Specify a project id for the case (optional)
      default: user-specified environment variable PROJECT or ACCOUNT
               or read from ~/.cesm_proj or ~/.ccsm_proj
     -silent [or -s]      Turns on silent mode - only fatal messages issued.
     -verbose [or -v]     Turn on verbose echoing of settings.
EOF
}

#-----------------------------------------------------------------------------------------------
# Parse command-line options.
my %opts = (
	    );
GetOptions(
    "h|help"                    => \$opts{'help'},
    "case=s"                    => \$opts{'case'},
    "clone=s"                   => \$opts{'clone'},
    "mach_dir=s"                => \$opts{'mach_dir'},
    "project=s"                 => \$opts{'project'},
    "s|silent"                  => \$opts{'silent'},
    "testname=s"                => \$opts{'testname'},
    "v|verbose"                 => \$opts{'verbose'},
)  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed argumentss
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

# Check for manditory case input if not just listing valid values

my $case;
my $clone;
my $caseroot;
my $cloneroot;
my $testname;
my $project;

# Check for manditory case input
if ($opts{'case'}) {
    $case = $opts{'case'};
} else {
    die "Must provide case as input argument \n";
}
$caseroot = abs_path("$case");
if (-d $caseroot) {
    die "New caseroot directory $caseroot already exists \n";
}
my @dirs = split "/", $caseroot, -1; 
my $num = scalar @dirs;
$case = @dirs[$num-1];

# Check for manditory clone input
if ($opts{'clone'}) {
    $clone = $opts{'clone'};
} else {
    die "Must provide clone as input argument \n";
}
$cloneroot = abs_path("$clone");
(-d "$cloneroot")  or  die <<"EOF";
** Cannot find cloneroot directory \"$cloneroot\" **
EOF
my @dirs = split "/", $cloneroot, -1; 
my $num = scalar @dirs;
$clone = @dirs[$num-1];

# Check for optional testname input
if ($opts{'testname'}) {
    $testname = $opts{'testname'};
}
# Define 3 print levels:
# 0 - only issue fatal error messages
# 1 - only informs what files are created (default)
# 2 - verbose
my $print = 1;
if ($opts{'silent'})  { $print = 0; }
if ($opts{'verbose'}) { $print = 2; }
my $eol = "\n";

#-----------------------------------------------------------------------------------------------
# Make sure we can find required perl modules and configuration files.
# Look for them in the directory that contains the create_newcase script.

# The ConfigCase module provides utilities to store and manipulate the configuration.
(-f "$cloneroot/Tools/ConfigCase.pm")  or  die <<"EOF";
** Cannot find perl module \"ConfigCase.pm\" in directory 
    \"$cloneroot/Tools/Tools\" **
EOF

# Tests file
my $tests_file = 'config_tests.xml';
(-f "$cfgdir/Testing/Testcases/$tests_file")  or  die <<"EOF";
** Cannot find test parameters file \"$tests_file\" in directory 
    \"$cfgdir/Testing/Testcases\" **
EOF

if ($print>=2) { print "Setting configuration directory to $cfgdir$eol"; }

#-----------------------------------------------------------------------------------------------
# Add $caseroot Tools to the list of paths that Perl searches for modules
my @dirs = ("$cloneroot/Tools", "$cfgdir/Tools");
unshift @INC, @dirs;
require ConfigCase;
require ProjectTools;

#-----------------------------------------------------------------------------------------------
# Create the case directory tree utilizing the clone tree 
my $sysmod;

# Note - script files are named using the first 12-15 chars of $clone and
# we want to remove those as well

$sysmod = "mkdir -p $caseroot"; 
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

$sysmod = "cp -pr $cloneroot/* $caseroot/"; 
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

my $clonesubname = substr($clone,0,12);
$sysmod = "rm -f $caseroot/$clonesubname*"; 
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

$sysmod = "rm -f $caseroot/*~";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

# Change directory to be $caseroot
chdir $caseroot;

# Obtain variables needed below
my $scriptsroot = `./xmlquery SCRIPTSROOT -value`;
my $machdir     = `./xmlquery CCSM_MACHDIR -value`;
my $mach        = `./xmlquery MACH -value`;
my $username     = "$ENV{'USER'}"; #TODO - change ccsmuser to username

my $xmlchange_ids = "";
$xmlchange_ids = "$xmlchange_ids" . "," . "CCSMUSER=$username";
$xmlchange_ids = "$xmlchange_ids" . "," . "USER=$username";
$xmlchange_ids = "$xmlchange_ids" . "," . "CASEROOT=$caseroot";
$xmlchange_ids = "$xmlchange_ids" . "," . "CASE=$case";
$xmlchange_ids = "$xmlchange_ids" . "," . "BUILD_COMPLETE=$false";
$xmlchange_ids = "$xmlchange_ids" . "," . "BUILD_COMPLETE=FALSE";
$xmlchange_ids = "$xmlchange_ids" . "," . "CONTINUE_RUN=FALSE";
$xmlchange_ids = "$xmlchange_ids" . "," . "RESUBMIT=0";
if ($opts{'mach_dir'}) {
    $xmlchange_ids = "$xmlchange_ids" . "," . "CCSM_MACHIDR=$opts{'mach_dir'}";
}
my $repotag="tag unknown";
if (-f "$cimeroot/ChangeLog") { 
    $repotag =`grep 'Tag name:' $cimeroot/ChangeLog | head -1`;
}
my @repotag = split(/ /,$repotag); 
$repotag = @repotag[2]; 
chomp($repotag);
$xmlchange_ids = "$CCSM_REPOTAG" . "," . "CCSM_REPOTAG=$repotag");

# --- Set project id 
# Note: we do not just copy this from the clone because it seems likely that
# users will want to change this sometimes, especially when cloning another
# user's case. However, note that, if a project is not given, the fallback will
# be to copy it from the clone, just like other xml variables are copied. For
# that reason, we do not call check_project_required_but_unset.

# Check for optional project; if not given, see if we can find a project to use
if ($opts{'project'}) {
    $project = $opts{'project'};
} else {
    $project = ProjectTools::find_project();
}
my $set_project = ProjectTools::set_project($project);
if ($set_project) {
    $sysmod = "xmlchange PROJECT=$project";
     system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
} 

# Set Testname parameters
# First determine if debug option is to be set for test, then determine
# all of the other test settings by evaluating config_tests.xml for the testname
if (defined $opts{'testname'}) {
    $testname = $opts{'testname'};
    if ($testname =~ "_D") {
	# remove _D from testname
	chop($testname);
	chop($testname);
	$cfg_ref->set('DEBUG', "TRUE");
    }
    ConfigTests:setTest("$cfgdir/Testing/Testcases/config_tests.xml", $testname, $cfg_ref);
    print "Test specifier $testname will overwrite env variable definitions.$eol"; 
}

# Delete files
$sysmod = "rm -f $caseroot/LockedFiles/*";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}
$sysmod = "rm -rf $caseroot/logs/*";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}
$sysmod = "rm -rf $caseroot/timing/*";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}
$sysmod = "rm -rf $caseroot/TestStatus*";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

# Copy env_case.xml in locked files
$sysmod = "cp $caseroot/env_case.xml $caseroot/LockedFiles/env_case.xml.locked";
system($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}
print "Locking file $caseroot/env_case.xml \n";

# --- Create $case.build
$sysmod = "cp $scriptsroot/Tools/cesm_build.csh  $caseroot/$case.build";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

$sysmod = "chmod 755 $caseroot/$case.build";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

# --- Create $case.clean_build
$sysmod = "cp $scriptsroot/Tools/cesm_clean_build $caseroot/$case.clean_build"; 
system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";

# --- Create $case.submit
$sysmod = "cp  $scriptsroot/Tools/cesm_submit $caseroot/$case.submit"; 
system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";

# --- Create $case.l_archive
my $sysmod = "env CCSMUSER=$username CASE=$case CASEROOT=$caseroot PROJECT=$project env PHASE=set_larch ${machdir}/mkbatch.$mach";
system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";

# --- Create preview_namelist file
my $file = "${caseroot}/preview_namelists"; 
$sysmod = "cp  $scriptsroot/Tools/preview_namelists $file"; 
system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
$sysmod = "chmod 755 $file";
system ($sysmod); if ($? == -1) {die "$sysmod failed: $!\n";}

# --- Print output ---
my $compset = `./xmlquery COMPSET -value`;
my $compset = `./xmlquery COMPSET -value`;
print "Cloning compset $compset \n";
print "Successfully created new case\n   $caseroot\nfrom clone case\n   $cloneroot\n";
exit;

#-----------------------------------------------------------------------------------------------
# FINISHED ####################################################################################
#-----------------------------------------------------------------------------------------------


