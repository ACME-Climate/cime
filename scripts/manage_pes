#!/usr/bin/env perl 
use XML::LibXML;
use IO::File;
use Data::Dumper;
use Getopt::Long;
use POSIX qw(strftime);
use Cwd qw(abs_path);
use File::Basename;
use strict;

#==========================================================================
# Globals
#==========================================================================
my %opts;
my $scriptdir = dirname(abs_path(__FILE__));
my $cimeroot  = abs_path("$scriptdir/../");
my $peslist;
my $component;

my $banner = "==========================================================================";

{
    #==========================================================================
    # Simple class to facilitate easier pe-layout parsing..
    # ==========================================================================
    package CIMEPes;

    sub new 
    {
	my ($class, %params) = @_;
	
	my $self = {
	    grid       => undef,  	
	    machine    => undef, 	
	    compset    => undef, 	
	    pesize     => undef, 	
	    comment    => undef, 	

	    ntasks_atm => undef, ntasks_lnd => undef, ntasks_ice => undef, ntasks_ocn => undef, 
	    ntasks_rof => undef, ntasks_glc => undef, ntasks_wav => undef, ntasks_cpl => undef,

	    nthrds_atm => undef, nthrds_lnd => undef, nthrds_ice => undef, nthrds_ocn => undef, 	
	    nthrds_rof => undef, nthrds_glc => undef, nthrds_wav => undef, nthrds_cpl => undef, 	

	    rootpe_atm => undef, rootpe_lnd => undef, rootpe_ice => undef, rootpe_ocn => undef,
	    rootpe_rof => undef, rootpe_glc => undef, rootpe_wav => undef, rootpe_cpl => undef,

	    pstrid_atm => undef, pstrid_lnd => undef, pstrid_ice => undef, pstrid_ocn => undef,
	    pstrid_cpl => undef, pstrid_glc => undef, pstrid_rof => undef, pstrid_wav => undef,
	    
	    totalpes   => undef, pes_per_node => undef,  cost_pes     => undef,
	    ccsm_pcost => undef, ccsm_tcost   => undef,  ccsm_estcost => undef,

	    max_tasks_per_node => undef, pes_level => undef,
	};
	bless $self, $class;
	return $self;
    }
}

#==========================================================================
# Show the usage. 
#==========================================================================
sub usage
{

    my $usgstatement;
    $usgstatement = <<EOF;
SYNOPSIS

    manage_pes -query [-grid | -machine] -component component-name

    manage_pes -add -file newpes-layout -component component-name
    
  note: the component-name can be one of the following [allactive | cam | cice | cism | clm | drv | pop]

DESCRIPTION

    Adds and queries peslists with the xml pe-layout files for a given primary component.  

USAGE, OPTIONS, AND EXAMPLES
   
    There are two modes of operation: -add and -query 
    Usage for each of the modes are described below.  

    -add:
 
    This mode is intended for adding new pe layouts to the peslist. The script will parse your text 
    list, and add the new pe-layout to the appropriate grid, machine and optional argument 
    (i.e. compset, pesize) entry.  If duplicates are found, they will be silently ignored, 
    even if they contain a different comment.  
    Example:
          manage_pes -add -component <primary component> -machine -grid -attributes -file <xml file with new pelayout>

    -query:

	Query the peslist by grid and machine

    A note on the PE count specifiers:
    T, S, M, L, X are not constant.  first, they are only defined for a few
    compsets/resolution combinations.  second, they depend on compset
    and resolution.   you can imagine a T31_g37 range being 100 cores
    to 1000 cores from T to X.  but ne240_t12 would probably be 500 at T
    and 100,000 at X, for instance.  the 1, 1x1, 16x4, etc specify the tasks
    and threads for each component directly.

EOF

    print $usgstatement;
    exit(1);

}


#==========================================================================
# Get the options, check the options. 
#==========================================================================
sub obtainOptions
{
    GetOptions(
	"h|help"	=> \$opts{'help'},
	"f|file=s"	=> \$opts{'file'},
	"a|add"		=> \$opts{'add'},
	"q|query"	=> \$opts{'query'},
	"grid=s"	=> \$opts{'grid'},
	"machine=s"	=> \$opts{'machine'},
	"component=s"   => \$opts{'component'},
	)  or usage();

    if (@ARGV) {
	print "ERROR: unrecognized arguments: @ARGV\n";
	usage();
    }

    if ($opts{'help'}) {
	usage() 	
    }

    if ( ! defined $opts{'component'} ) {
	if (defined $opts{'query'} ) {
	    foreach my $comp ('allactive', 'cam ', 'clm', 'cice', 'drv', 'cism', 'pop') {
		$peslist = setPesList($comp);
		query(); 
	    }
	    exit(0);
	} else {
	    print "Must supply a component argument via the -component option \n";
	    print " values must be [allactive | cam | clm | cice | cism | pop | drv ] \n";
	    exit(1);
	}
    } else {
	$component = $opts{'component'};
	$peslist = setPesList($component);
    }
    if (defined $opts{'add'} && ! defined $opts{'file'})
    {
	print "To add test lists, you must supply a test list via the -file option\n";
	exit(1);
    }
}

#==========================================================================
# Create a new, blank xml document, which just contains the skeleton into which
# we can place tests (i.e., it contains an empty peslist).
# ==========================================================================
sub blankXML 
{
   my $newxml = XML::LibXML::Document->createDocument();
   my $root = $newxml->createElement('pesinfo');
   $newxml->setDocumentElement($root);
   return $newxml;
}

#==========================================================================
# Write the new peslist xml file.  
#==========================================================================
sub writeXML
{
    my ($pesxml) = shift;
    my $dtformat = strftime "%d%b%Y-%H%M%S",  localtime;

    my $newfilename; 
    if ($component eq 'cam') {
	$newfilename = "$cimeroot/machines/pesist_cam-$dtformat.xml";
    } 
    if ($component eq 'clm') {
	$newfilename = "$cimeroot/machines/peslist_clm-$dtformat.xml";
    }
    if ($component eq 'cice') {
	$newfilename = "$cimeroot/machines/peslist_cice-$dtformat.xml";
    }
    if ($component eq 'cism') {
	$newfilename = "$cimeroot/machines/peslist_cism-$dtformat.xml";
    }
    if ($component eq 'pop') {
	$newfilename = "$cimeroot/machines/peslist_pop-$dtformat.xml";
    }
    if ($component eq 'allactive') {
	$newfilename = "$cimeroot/scripts/peslist_allactive-$dtformat.xml";
    }
    if ($component eq 'drv') {
	$newfilename = "$cimeroot/machines/peslist_cime-$dtformat.xml";
    }
    print "\n now writing the new pes list to $newfilename\n";
    print "Please carefully review and/or diff the new file against the\n";
    print "original, and if you are satisfied with the changes, move \n";
    print "$newfilename to \n";
#	print "$peslist\n"; TODO
    print "as in with the unix command: \nmv $newfilename $peslist\n\n";

    open my $NEWPesXML, ">", "$newfilename" or die $?;
    my $tststring = $pesxml->toString(1); 
    print $NEWPesXML $tststring; 
    close $NEWPesXML;
}

#==========================================================================
# Convert an undefined value to an empty string.
# This is useful to avoid warnings.
#==========================================================================
sub undefToBlank 
{
   my $val = shift;
   if (! defined($val)) {
      $val = "";
   }
   return $val;
}

#==========================================================================
# Add a new pe-layout for a target machine and grid.  
# ==========================================================================
sub addPes
{
    my $pesfile = shift;
    my $pesfile_new = shift;

    my $parser = XML::LibXML->new( no_blanks => 1);

    my $pesxml     = $parser->parse_file($peslist);
    my $pesxml_new = $parser->parse_file($opts{'file'});

    # new pes file - assumes for now there is ONLY one entry

    my @grid_nodes = $pesxml_new->findnodes("/newpes/grid");
    if ($#grid_nodes != 0) {
	die " ERROR \@grid_nodes has unsupported size $#grid_nodes \n";
    }
    my @mach_nodes = $pesxml_new->findnodes("/newpes/grid/mach");
    if ($#mach_nodes != 0) {
	die " ERROR \@mach_nodes has unsupported size $#mach_nodes \n";
    }
    my @pes_nodes  = $pesxml_new->findnodes("/newpes/grid/mach/pes");
    if ($#pes_nodes != 0) {
	die " ERROR \@pes_nodes has unsupported size $#pes_nodes \n";
    }
    my @comment_nodes  = $pesxml_new->findnodes("/newpes/grid/mach/pes/comment");
    if ($#comment_nodes != 0) {
	die " ERROR \@comment_nodes has unsupported size $#comment_nodes \n";
    }

    my $grid_node    = @grid_nodes[0];
    my $mach_node    = @mach_nodes[0];
    my $pes_node     = @pes_nodes[0];
    my $comment_node = @comment_nodes[0];

    my $grid    = $grid_node->getAttribute('name');
    my $machine = $mach_node->getAttribute('name');
    my $compset = $pes_node->getAttribute('compset');
    my $pesize  = $pes_node->getAttribute('pesize');

    # Search the target grid and target machine in config_pes_component.xml 
    # for matches using Xpath queries. 

    my @xmlnodes = $pesxml->findnodes("/pesinfo/grid[\@name=\'$grid\']");
    if (! @xmlnodes) {

	# (1) if the grid does not exist then create a node for it

	print " Adding a new $grid grid pe layout \n";
	my $root = $pesxml->findnodes('./pesinfo')->get_node(0);
	$root->addChild($grid_node);

    } else {

	# (2) If the grid exists - does the machine exist in the grid definition

	if ($#xmlnodes != 0) {
	    die " ERROR number of grids in $peslist has incorrect size $#xmlnodes \n";
	}
	@xmlnodes = $pesxml->findnodes("/pesinfo/grid[\@name=\'$grid\']/mach[\@name=\'$machine\']/pes");
	if (! @xmlnodes) {
	    print " Adding a new machine $machine to grid $grid \n";
	    @xmlnodes = $pesxml->findnodes("/pesinfo/grid[\@name=\'$grid\']");
	    if ($#xmlnodes != 0) {
		die " ERROR number of machines $machine for grid $grid has incorrect size $#xmlnodes \n";
	    }
	    $xmlnodes[0]->addChild($mach_nodes[0]);

	} else {

	    # (3) If the grid and machine exists - do the other attributes match

	    @xmlnodes = $pesxml->findnodes("/pesinfo/grid[\@name=\'$grid\']/mach[\@name=\'$machine\']/pes[\@compset=\'$compset\' and \@pesize=\'$pesize\']");
	    if (@xmlnodes) {
		
		# we found a match - query the user if the new layout should overwrite the old one
		my $string = $xmlnodes[0]->toString(1);
		print " The following pe-layout match already exists \n";
		print "$string \n";
		print " Do you want to override the match with your pe-layout? [yes/no] (default is no) \n";

		my $result = <STDIN>;

		if ($result =~ /yes/) {
		    $xmlnodes[0]->parentNode()->addChild($pes_nodes[0]);
		    $xmlnodes[0]->parentNode()->removeChild($xmlnodes[0]); 
		}

	    } else {

		# (4) If the grid and machine exists and none of the attributes match - then simply add the node

		@xmlnodes = $pesxml->findnodes("/pesinfo/grid[\@name=\'$grid\']/mach[\@name=\'$machine\']/pes");
		$xmlnodes[0]->parentNode()->addChild($pes_nodes[0]);
	    }
	}
    }
    writeXML($pesxml);
}

#==========================================================================
# Query subroutine called from main. Read the xml file, query the object, 
# and print the user's choice of output. 
#==========================================================================
sub queryPes
{
    my $parser = XML::LibXML->new( no_blanks => 1);
    my $pesxml = $parser->parse_file($peslist);
    
    my $grid = $opts{'grid'};
    my $machine = $opts{'machine'};

    # drill down into the grid nodes.  Move onto the next element
    # if anything doesn't match the grid and machine

    my $root = $pesxml->getDocumentElement();
	
    # Does the target grid exist in the config_pes file - if not set it to any
    if (defined $grid) {
	my @pes = $pesxml->findnodes(".//grid[contains(\@name,\"$grid\")]");
	if ($#pes == -1) {
	    $grid = 'any';
	}
    }

    # Does the target machine exist in the config_pes file - if not set it to any
    if (defined $machine) {
	my @pes = $pesxml->findnodes(".//grid[contains(\@name,\"$grid\")]/mach[contains(\@name,\"$machine\")]/pes");
	if ($#pes == -1) {
	    $machine = 'any';
	}
    }
    # Determine settings for target machine and target grid
    if ( defined $grid && defined $machine) {
	foreach my $node_grid ($pesxml->findnodes('/pesinfo/grid')) {
	    my $node_gridname= $node_grid->getAttribute('name');
	    if ($node_gridname !~ /$grid/) {
		$root->removeChild($node_grid);
		next;
	    }
	    foreach my $node_mach ($node_grid->findnodes("./mach")) {
		my $node_machname= $node_mach->getAttribute('name');
		if ($machine !~ /$node_machname/) {	
		    $node_grid->removeChild($node_mach);
		    next;
		}
		if(! $node_mach->nonBlankChildNodes()) {
		    $node_grid->removeChild($node_mach);
		}
	    }
	    if(! $node_grid->nonBlankChildNodes()) {
		$root->removeChild($node_grid);
	    }
	}
    } elsif ( ! defined $grid && defined $machine) {
	foreach my $node_grid ($pesxml->findnodes('/pesinfo/grid')) {
	    foreach my $node_mach ($node_grid->findnodes("./mach")) {
		my $node_machname= $node_mach->getAttribute('name');
		if ($machine !~ /$node_machname/) {	
		    $node_grid->removeChild($node_mach);
		    next;
		}
		if(! $node_mach->nonBlankChildNodes()) {
		    $node_grid->removeChild($node_mach);
		}
	    }
	    if(! $node_grid->nonBlankChildNodes()) {
		$root->removeChild($node_grid);
	    }
	}
    } elsif ( defined $grid && ! defined $machine) {
	foreach my $node_grid ($pesxml->findnodes('/pesinfo/grid')) {
	    my $node_gridname= $node_grid->getAttribute('name');
	    if ($node_gridname !~ /$grid/) {
		$root->removeChild($node_grid);
		next;
	    }
	}
    }

    foreach my $node_override_grid ($pesxml->findnodes(".//override/grid")) {
	my $gridname = $node_override_grid->getAttribute('name');

	if (($gridname eq 'any') || ($gridname =~ /$grid/ )) {
	    foreach my $node_mach ($node_override_grid->findnodes("./mach")) {
		my $machname = $node_mach->getAttribute('name');
		if ($machname eq 'any' || $machname =~ /$machine/ ) {
		    foreach my $node_pes ($node_override_grid->findnodes("./pes")) {
			my $pesize  = $node_pes>getAttribute('pesize');
			my $compset = $node_pes>getAttribute('compset');
			if ( ($pesize eq 'any') && ($compset eq 'any') ) {
			    # TODO - fill this in
			}
		    }
		}
	    }
	}
    }

    formattedOutput($pesxml);
}

#==========================================================================
# print out the queried test list in a (hopefully) nicely formatted fashion. 
#==========================================================================
sub formattedOutput {

   my $pesxml = shift;

   my @output_ntasks;
   my @output_nthrds;
   my @output_rootpe;
   my @output_header_grid;
   my @output_header_machine;
   my @output_header_compset;
   my @output_header_pesize;
   my @output_header_comment;

   my %configcompsets;
   my $compsetxml = XML::LibXML->new()->parse_file("$scriptdir/Tools/config_compsets.xml");
   foreach my $cfgcompset ($compsetxml->findnodes('//COMPSET')) {
      my $alias = $cfgcompset->getAttribute('alias');
      my $sname = $cfgcompset->getAttribute('sname');
      $configcompsets{$alias} = $sname;
   }

   my @pes_settings;

   foreach my $grid_node ($pesxml->findnodes('./pesinfo/grid')) {
       my $grid = $grid_node->getAttribute('name');

       foreach my $mach_node ($grid_node->findnodes('./mach')) {
	   my $machine = $mach_node->getAttribute('name');

	   foreach my $pes_node ($mach_node->findnodes('./pes')) {
	       my $pes_setting = new CIMEPes();
	       $pes_setting->{grid} = $grid;
	       $pes_setting->{machine} = $machine;

               my $pesize  = $pes_node->getAttribute('pesize');
	       if (defined $pesize) {
		   $pes_setting->{pesize} = $pesize;
	       }

               my $compset = $pes_node->getAttribute('compset');
	       if (defined $compset) {
		   $pes_setting->{compset} = $compset;
	       }

	       foreach my $node_comment ($pes_node->findnodes("./comment")) {
		   my $name  = $node_comment->nodeName();
		   my $value = $node_comment->textContent();
		   $pes_setting->{$name} = $value;
	       }
	       foreach my $node_ntasks ($pes_node->findnodes("./ntasks")) {
		   my @child_nodes = $node_ntasks->childNodes();
		   foreach my $child_node (@child_nodes) {
		       my $name  = $child_node->nodeName();
		       my $value = $child_node->textContent();
		       if ($value eq 'max_tasks_per_node') {$value = 'MTPN';}
		       $pes_setting->{$name} = $value;
		   }
	       }
	       foreach my $node_nthrds ($pes_node->findnodes("./nthrds")) {
		   my @child_nodes = $node_nthrds->childNodes();
		   foreach my $child_node (@child_nodes) {
		       my $name  = $child_node->nodeName();
		       my $value = $child_node->textContent();
		       if ($value eq 'max_thrds_per_node') {$value = 'MTPN';}
		       $pes_setting->{$name} = $value;
		   }
	       }
	       foreach my $node_rootpe ($pes_node->findnodes("./rootpe")) {
		   my @child_nodes = $node_rootpe->childNodes();
		   foreach my $child_node (@child_nodes) {

		       my $name  = $child_node->nodeName();
		       my $value = $child_node->textContent();
		       if ($value eq 'max_tasks_per_node') {$value = 'MTPN';}
		       $pes_setting->{$name} = $value;
		   }
	       }
	       push(@pes_settings, $pes_setting);
	   }
       }
   }

   foreach my $pes_setting (@pes_settings) {
       my $grid	       = $pes_setting->{grid};
       my $compset     = $pes_setting->{compset};
       my $fcompset    = "$compset ($configcompsets{$compset})";
       my $pesize      = $pes_setting->{pesize};
       my $machine     = $pes_setting->{machine};
       my $comment     = $pes_setting->{comment};
       my $ntasks_atm  = $pes_setting->{ntasks_atm};
       my $ntasks_lnd  = $pes_setting->{ntasks_lnd};
       my $ntasks_ice  = $pes_setting->{ntasks_ice};
       my $ntasks_ocn  = $pes_setting->{ntasks_ocn};
       my $ntasks_rof  = $pes_setting->{ntasks_rof};
       my $ntasks_glc  = $pes_setting->{ntasks_glc};
       my $ntasks_wav  = $pes_setting->{ntasks_wav};
       my $ntasks_cpl  = $pes_setting->{ntasks_cpl};
       my $nthrds_atm  = $pes_setting->{nthrds_atm};
       my $nthrds_lnd  = $pes_setting->{nthrds_lnd};
       my $nthrds_ice  = $pes_setting->{nthrds_ice};
       my $nthrds_ocn  = $pes_setting->{nthrds_ocn};
       my $nthrds_rof  = $pes_setting->{nthrds_rof};
       my $nthrds_glc  = $pes_setting->{nthrds_glc};
       my $nthrds_wav  = $pes_setting->{nthrds_wav};
       my $nthrds_cpl  = $pes_setting->{nthrds_cpl};
       my $rootpe_atm  = $pes_setting->{rootpe_atm};
       my $rootpe_lnd  = $pes_setting->{rootpe_lnd};
       my $rootpe_ice  = $pes_setting->{rootpe_ice};
       my $rootpe_ocn  = $pes_setting->{rootpe_ocn};
       my $rootpe_rof  = $pes_setting->{rootpe_rof};
       my $rootpe_glc  = $pes_setting->{rootpe_glc};
       my $rootpe_wav  = $pes_setting->{rootpe_wav};
       my $rootpe_cpl  = $pes_setting->{rootpe_cpl};
       
       my $line_ntasks =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'ntasks: ', $ntasks_atm, $ntasks_lnd, $ntasks_ice, $ntasks_ocn, $ntasks_rof, $ntasks_glc, $ntasks_wav, $ntasks_cpl);

       my $line_nthrds =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'nthrds: ', $nthrds_atm, $nthrds_lnd, $nthrds_ice, $nthrds_ocn, $nthrds_rof, $nthrds_glc, $nthrds_wav, $nthrds_cpl);

       my $line_rootpe =  sprintf("         %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s",
				  'rootpe: ', $rootpe_atm, $rootpe_lnd, $rootpe_ice, $rootpe_ocn, $rootpe_rof, $rootpe_glc, $rootpe_wav, $rootpe_cpl);

       my $line_header_grid    = sprintf("      %-8s %-20s ", "grid   :", $grid);
       my $line_header_machine = sprintf("      %-8s %-20s ", "machine:" ,$machine);
       my $line_header_compset = sprintf("      %-8s %-20s ", "compset:", $compset);
       my $line_header_pesize  = sprintf("      %-8s %-20s ", "pesize :", $pesize);
       my $line_header_comment = sprintf("      %-8s %-20s ", "comment:", $comment);

       push(@output_header_grid   , $line_header_grid);
       push(@output_header_machine, $line_header_machine);
       push(@output_header_compset, $line_header_compset);
       push(@output_header_pesize , $line_header_pesize);
       push(@output_header_comment, $line_header_comment);
       push(@output_ntasks, $line_ntasks);
       push(@output_nthrds, $line_nthrds);
       push(@output_rootpe, $line_rootpe);
   }
	
   my $header2        =  sprintf("                    %-10s %-10s %-10s %-10s %-10s %-10s %-10s %-10s ",
				 "atm", "lnd", "ice", "ocn", "rof", "glc", "wav", "cpl");

   for (my $i = 0; $i <= $#output_ntasks; $i++) {
       map { print "$_\n" } $output_header_grid[$i];
       map { print "$_\n" } $output_header_machine[$i];
       map { print "$_\n" } $output_header_compset[$i];
       map { print "$_\n" } $output_header_pesize[$i];
       map { print "$_\n" } $output_header_comment[$i];
       map { print "$_\n" } $header2;
       map { print "$_\n" } $output_ntasks[$i];
       map { print "$_\n" } $output_nthrds[$i];
       map { print "$_\n" } $output_rootpe[$i];
       map { print "$_\n" } "\n";
   }
}

#==========================================================================
# Determine peslist for primary component
#==========================================================================
sub setPesList{
    my $comp = shift;
    my $list;

    if ($comp =~ /^cam/ ) {
	$list = "$cimeroot/machines/config_pes_cam.xml"; 
    } elsif ($comp =~ /^allactive/) {
	$list = "$cimeroot/machines/config_pes_allactive.xml"; 
    } elsif ($comp =~ /^clm/) {
	$list = "$cimeroot/machines/config_pes_clm.xml"; 
    } elsif ($comp =~ /^cice/) {
	$list = "$cimeroot/machines/config_pes_cice.xml"; 
    } elsif ($comp =~ /^drv/) {
	$list = "$cimeroot/machines/config_pes_cime.xml"; 
    } elsif ($comp =~ /^cism/) {
	$list = "$cimeroot/machines/config_pes_cism.xml"; 
    } elsif ($comp =~ /^pop/) {
	$list = "$cimeroot/machines/config_pes_pop.xml"; 
    } else {
	die "component $comp does not match supported components \n";
    }
    if (-f $list) {
	print "# peslist is $list \n";
	return $list;
    } else {
	print "peslist $list for primary component is not present \n";
	exit(1);
    }
}    

#==========================================================================
# Main routine
#==========================================================================
sub main
{
    obtainOptions();

    if (defined $opts{'add'})
    {
	print "\n Adding pe layout...\n";
	addPes();
    }
    elsif (defined $opts{'query'})
    {
	queryPes();
    }
}

main(@ARGV) unless caller;
